Title: Connect to Your Cluster - MongoDB Atlas

On this pageEstimated completion time: 5 minutesYou can connect to your cluster in a variety of ways. In this tutorial,you use one of the following methods:The MongoDB Shell, an interactivecommand line interface to MongoDB. You can use mongoshto insert and interact with data on your Atlascluster.MongoDB Compass, a GUI for your MongoDB data. Youcan use Compass to explore, modify, and visualize your data.A MongoDB driver to communicate with your MongoDBdatabase programmatically. To see all supported languages,refer to the MongoDB Driver documentation.âž¤ Use the Select your language drop-down menu to set theconnection method for this tutorial, including mongosh andCompass.If you're using the atlas setup or atlas quickstart commandswith default options to get started with Atlas, the Atlas CLIprovides you with a mongosh command to connect to your cluster.To connect to a cluster, you must be a database user.Before you start, verify that you have:An Atlas account.An organization with a project.An active cluster created in your account.An IP address added to your IP access list.A database user on your cluster.You must have a database user set up on your cluster to access yourdeployment. For security purposes, Atlas requires clients toauthenticate as database users to access clusters.A terminalmongoshTo download and install mongosh:If it's not already displayed, select the organization thatcontains your desired project from the  Organizations menu in thenavigation bar.If it's not already displayed, select your desired projectfrom the Projects menu in the navigation bar.If it's not already displayed, click Clusters in thesidebar.The Clusters page displays.Click Connect for the cluster towhich you want to connect.Select your operating system from the dropdown.If you are using Windows or Linux,download using one of the following options:Click Download mongosh tobegin the download.Click Copy download URL to copy adownload URL to your clipboard, then either:Use curl to fetch the installer file,orPaste the URL in a browser window.Download the installer from theMongoDB Shell page.If you are using macOS, you can use the providedHomebrew command to download the shell.Select the appropriate tab based on your operating system:Download using one of the following options:Click Download mongosh tobegin the download.Click Copy download URL to copy adownload URL to your clipboard, then either:Use curl to fetch the installer filefrom the URL, orPaste the URL in a browser window.Download the installer from theMongoDB Shell page.Extract the files from the downloaded archive.Add the mongosh binary to your PATHenvironment variable.Ensure that the extracted MongoDB Shell binaryis in the desired location in your filesystem,then add that location to your PATHenvironment variable.Open the Control Panel.In the System and Securitycategory, click System.Click Advanced system settings.The System Properties modaldisplays.Click Environment Variables.Select Path and clickEdit.Click New and add the filepath toyour mongosh binary.Use the Homebrew command provided.Copy the Homebrew command from the Atlas UIwindow and run it in a terminal.Download the installer using one of thefollowing options:Click Download mongosh tobegin the download.Click Copy download URL to copy adownload URL to your clipboard, then either:Use curl to fetch the installer filefrom the URL, orPaste the URL in a browser window.Download the installer from theMongoDB Shell page.The type of file you download depends on theoperating system you selected. If you selecta version of:Ubuntu or Debian you receive a .debpackage.RHEL, Amazon Linux, or SUSE you receivean .rpm package.If your operating system isn't listed, seethe .tgz installation instructions in the mongosh documentation.Install the mongosh package.Use dpkg to install mongosh: ```sudo dpkg -i mongodb-mongosh_<mongosh-version-and-platform>.deb``` Use rpm to install mongosh: ```sudo rpm -i mongodb-mongosh_<mongosh-version-and-platform>.rpm``` You should now be able to run mongosh using your terminal.To see if you have correctly added mongosh toyour systempath, run the following command in your terminal: ```mongosh --version``` You should see an output similar to the following: ```0.14.0``` To download and install MongoDB Compass:If it's not already displayed, select the organization thatcontains your desired project from the  Organizations menu in thenavigation bar.If it's not already displayed, select your desired projectfrom the Projects menu in the navigation bar.If it's not already displayed, click Clusters in thesidebar.The Clusters page displays.Click Connect for the cluster towhich you want to connect.From the Connect Modal, click Compass.Click I do not have MongoDB Compass.Select your operating system from the dropdown.A terminal.A text editor.dotnetA C# project. To initialize a project, runthe dotnet new console commandin your project directory. To learn more,see C# Quick Start.A terminal.A text editor.GoA Go project. To initialize a project, usethe go mod command. To learn more, seeGo Quick Start.Java Development Kit (JDK) version 8 or later.The driver dependencies installed by using Maven or Gradle.We recommend using an integrated development environment (IDE)such as IntelliJ IDEA orEclipse IDE to configure the dependencies.To configure Maven or Gradle to build and run your project, seeAdd MongoDB as a Dependency.A terminalA text editornpmNode.jsTo install the Node.js driver, run thefollowing command at a terminal prompt: ```npm install mongodb --save``` A terminal.A text editor.Python. To download the latest version of Python for youroperating system, see Python Downloads Page.The pip packageinstaller. Starting with Python 2.7.9 and Python 3.4,packages downloaded from https://python.org include pip.To install pip manually, seethe pip installation page. This packageincludes Python.To install the Python driver, called PyMongo:Run the following command in your terminal: ```python -m pip install "pymongo[snappy,gssapi,srv,tls]"``` This command installs the PyMongo driver and a few dependencies forthe driver. To learn more, see the Python DriverInstallation Pageon GitHub.Test your PyMongo installation to ensure you cansuccessfully connect to your cluster.Run the following command to open the Python shell: ```python``` Import PyMongo by running the following command in the Pythonshell: ```importpymongo``` Check your PyMongo version using the following command: ```pymongo.version``` If PyMongo is correctly installed, you should see an outputsimilar to the following: ```'3.11.0'``` In this section, you get your cluster's connection string from the Atlas UI and connectto your cluster by using your preferred connection method.To learn about all supported methods, seeConnect to Your Cloud Cluster. For additional driver examples,see Connect via Drivers.If it's not already displayed, select the organization thatcontains your desired project from the  Organizations menu in thenavigation bar.If it's not already displayed, select your desired projectfrom the Projects menu in the navigation bar.If it's not already displayed, click Clusters in thesidebar.The Clusters page displays.Click Connect for the cluster towhich you want to connect.From the Connect Modal, click Shell.This is a unique connection string specific to your Atlascluster. Atlas replaces the username of the connectionstring with the username of the database user you created earlierin this procedure.When prompted, enter your database user's password.You will be prompted to enter the password you specified when youcreated your database user in Atlas.You should now be connected to your Atlas cluster within themongosh. Your terminal should display somethingsimilar to the following: ```MongoDB Enterprise GettingStarted-shard-0:PRIMARY>``` If you are having trouble connecting to your cluster, double checkthat you have added your IP address to your IP access list and that you are specifying the correctdatabase user credentials. If you haveforgotten your database user credentials, you can alwayscreate a new database user.If it's not already displayed, select the organization thatcontains your desired project from the  Organizations menu in thenavigation bar.If it's not already displayed, select your desired projectfrom the Projects menu in the navigation bar.If it's not already displayed, click Clusters in thesidebar.The Clusters page displays.Click Connect for the cluster towhich you want to connect.Click I have MongoDB Compass.Choose your version of MongoDB Compass in the dropdown. To checkthe version of MongoDB Compass that you have installed on your system,click About MongoDB Compass in the application.Copy the connection string presented in the AtlasConnect dialog box.Use the copied connection string for connecting to MongoDB Compass ifyour deployment uses a single cloud provider or doesn't use anyof the following: SSL, authentication certificates, or an SSH tunnel.Click New Connection and paste the connectionstring into the Paste your connection string field.(Optional) To save this connection for future use, clickCreate Favorite and add a name for this connection.You can find saved favorite connections under Favoritesin the left pane of the MongoDB Compass Connect window.Click Connect.Fill in connection fields individually if your deployment spansmore than one cloud provider or if it uses one of the following:SSL, authentication certificates, or an SSH tunnel.Click Fill in Connection Fields Individually.Under the hostname tab, enter the hostname and port,and choose your authentication mechanism from the dropdown.Under the More options tab, configure the following:If your deployment uses SSL or an SSH tunnel, specifySSL or SSH tunnel options.If your deployment spans more than one cloud provider,specify read preference options.If your deployment uses X.509 certificates, add aself-managed X.509 certificateor an auto-generated X.509 certificatemanaged by Atlas.To learn more, see Connect to MongoDBin the MongoDB Compass documentation.(Optional) To save this connection for future use, clickCreate Favorite and add a name for this connection.You can find saved favorite connections under Favoritesin the left pane of the MongoDB Compass Connect window.Click Connect.If it's not already displayed, select the organization thatcontains your desired project from the  Organizations menu in thenavigation bar.If it's not already displayed, select your desired projectfrom the Projects menu in the navigation bar.If it's not already displayed, click Clusters in thesidebar.The Clusters page displays.Click Connect for the cluster towhich you want to connect.From the Connect Modal, click Drivers.Select your version of the driver from the dropdown. The connectionstring displays.Replace <password> with the password specified when you created your database user.If your passwords, database names, or connection strings containreserved URI characters, you must escape the characters. For example,if your password is @bc123, you must escape the @character when specifying the password in the connectionstring, such as %40bc123. To learn more, see Special Characters in Connection String Password.The following sample application connects to your Atlascluster with your connection string and sends a ping toconfirm a successful connection. To test the sample application:Create a new directory called connect andinitialize your project by using the dotnet new command. ```mkdir connectcd connectdotnet new console``` Run the following command to add the .NET/C# Driver to your projectas a dependency: ```dotnet add package MongoDB.Driver``` Replace the contents of the Program.cs file with the following code.Make sure to replace the placeholder with your updated connectionstring: ```1usingMongoDB.Bson;2usingMongoDB.Driver;34publicclassConnect5{6//Replace the followingwithyour Atlas connectionstring7privateconststringMongoConnectionString ="mongodb+srv://<db_username>:<db_password>@<clusterName>.mongodb.net/?retryWrites=true&w=majority";89publicstaticvoidMain(string[] args)10{11//Connect to yourAtlas cluster12varclient =newMongoClient(MongoConnectionString);1314//Send a pingtoconfirm a successfulconnection15try{16varresult = client.GetDatabase("admin").RunCommand<BsonDocument>(newBsonDocument("ping",1));17Console.WriteLine("Successfully connected to Atlas");18}19catch(Exception e) { Console.WriteLine(e);}20}21}``` To run your application, use the following command: ```dotnet run Program.cs```  ```Successfully connected to Atlas``` If it's not already displayed, select the organization thatcontains your desired project from the  Organizations menu in thenavigation bar.If it's not already displayed, select your desired projectfrom the Projects menu in the navigation bar.If it's not already displayed, click Clusters in thesidebar.The Clusters page displays.Click Connect for the cluster towhich you want to connect.From the Connect Modal, click Drivers.Select your version of the driver from the dropdown. Theconnection string displays.Replace <password> with the password specified when you created your database user.If your passwords, database names, or connection strings containreserved URI characters, you must escape the characters. For example,if your password is @bc123, you must escape the @character when specifying the password in the connectionstring, such as %40bc123. To learn more, see Special Characters in Connection String Password.The following sample application connects to your Atlascluster with your connection string and sends a ping toconfirm a successful connection. To test the sample application:Create a new directory called connect andinitialize your project by using the go mod command. ```mkdir connectcd connectgo mod init connect``` Run the following commands to download the Go driverand driver dependencies: ```go get go.mongodb.org/mongo-driver/mongogo get github.com/joho/godotenv``` In your project, create a new file called connect.go and pastethe following code. Make sure to replace the placeholder withyour updated connection string: ```1packagemain23import(4"context"5"fmt"67"go.mongodb.org/mongo-driver/bson"8"go.mongodb.org/mongo-driver/mongo"9"go.mongodb.org/mongo-driver/mongo/options"10)1112funcmain(){1314//Replace the followingwithyour Atlas connectionstring15uri:="mongodb+srv://<db_username>:<db_password>@<clusterName>.mongodb.net/?retryWrites=true&w=majority"1617//Connect to yourAtlas cluster18client, err:=mongo.Connect(context.TODO(), options.Client().ApplyURI(uri))19iferr !=nil{20panic(err)21}22deferclient.Disconnect(context.TODO())2324//Send a pingtoconfirm a successfulconnection25varresult bson.M26iferr:=client.Database("admin").RunCommand(context.TODO(), bson.D{{"ping",1}}).Decode(&result); err !=nil{27panic(err)28}29fmt.Println("Successfully connected to Atlas")30}``` To run your application, use the following command: ```go run connect.go```  ```Successfully connected to Atlas``` If it's not already displayed, select the organization thatcontains your desired project from the  Organizations menu in thenavigation bar.If it's not already displayed, select your desired projectfrom the Projects menu in the navigation bar.If it's not already displayed, click Clusters in thesidebar.The Clusters page displays.Click Connect for the cluster towhich you want to connect.From the Connect Modal, click Drivers.Select your version of the driver from the dropdown. The connectionstring displays.Replace <password> with the password specified when you created your database user.If your passwords, database names, or connection strings containreserved URI characters, you must escape the characters. For example,if your password is @bc123, you must escape the @character when specifying the password in the connectionstring, such as %40bc123. To learn more, see Special Characters in Connection String Password.The following sample application connects to your Atlascluster with your connection string and  sends a ping toconfirm a successful connection. To test the sample application,copy the following code into a file called Connect.java.Replace the placeholder with your updated connectionstring: ```1importcom.mongodb.*;2importorg.bson.BsonDocument;3importorg.bson.BsonInt64;4importorg.bson.Document;5importorg.bson.conversions.Bson;67importcom.mongodb.client.MongoClient;8importcom.mongodb.client.MongoClients;9importcom.mongodb.client.MongoDatabase;1011publicclassConnect{12publicstaticvoidmain(String[] args){13//Replace the placeholderwithyour Atlas connectionstring14Stringuri="mongodb+srv://<db_username>:<db_password>@<clusterName>.mongodb.net/?retryWrites=true&w=majority";1516// Construct a ServerApiinstance using theServerApi.builder() method17ServerApiserverApi=ServerApi.builder()18.version(ServerApiVersion.V1)19.build();2021MongoClientSettingssettings=MongoClientSettings.builder()22.applyConnectionString(newConnectionString(uri))23.serverApi(serverApi)24.build();2526//Create a newclientand connect tothe server27try(MongoClientmongoClient=MongoClients.create(settings)) {28MongoDatabasedatabase=mongoClient.getDatabase("admin");29try{30//Send a pingtoconfirm a successfulconnection31Bsoncommand=newBsonDocument("ping",newBsonInt64(1));32DocumentcommandResult=database.runCommand(command);33System.out.println("Successfully connected to Atlas");34}catch(MongoException e) {35System.err.println(e);36}37}38}39}``` Compile and run the Connect.java file by usingan IDE or the following commands: ```javac Connect.javajava Connect```  ```Successfully connected to Atlas``` If it's not already displayed, select the organization thatcontains your desired project from the  Organizations menu in thenavigation bar.If it's not already displayed, select your desired projectfrom the Projects menu in the navigation bar.If it's not already displayed, click Clusters in thesidebar.The Clusters page displays.Click Connect for the cluster towhich you want to connect.From the Connect Modal, click Drivers.Select your version of the driver from the dropdown. The connectionstring displays.Replace <password> with the password specified when you created your database user.If your passwords, database names, or connection strings containreserved URI characters, you must escape the characters. For example,if your password is @bc123, you must escape the @character when specifying the password in the connectionstring, such as %40bc123. To learn more, see Special Characters in Connection String Password.The following sample application connects to your Atlascluster with your connection string and returns aconfirmation message. To test the sample application,copy the following code into a file called connect.js.Replace the placeholder with your updated connectionstring: ```1const{MongoClient}=require("mongodb");23//Replace the followingwithyour Atlas connectionstring4consturl="mongodb+srv://<db_username>:<db_password>@<clusterName>.mongodb.net/?retryWrites=true&w=majority";56//Connect to yourAtlas cluster7constclient=newMongoClient(url);89asyncfunctionrun(){10try{11awaitclient.connect();12console.log("Successfully connected to Atlas");1314}catch(err){15console.log(err.stack);16}17finally{18awaitclient.close();19}20}2122run().catch(console.dir);``` To run the sample application, use the following command: ```node connect.js```  ```Successfully connected to Atlas``` If it's not already displayed, select the organization thatcontains your desired project from the  Organizations menu in thenavigation bar.If it's not already displayed, select your desired projectfrom the Projects menu in the navigation bar.If it's not already displayed, click Clusters in thesidebar.The Clusters page displays.Click Connect for the cluster towhich you want to connect.From the Connect Modal, click Drivers.The connection string displays.Replace <password> with the password specified when you created your database user.If your passwords, database names, or connection strings containreserved URI characters, you must escape the characters. For example,if your password is @bc123, you must escape the @character when specifying the password in the connectionstring, such as %40bc123. To learn more, see Special Characters in Connection String Password.To connect to a running MongoDB instance, PyMongorequires MongoClient. In the Python shell running in yourterminal, run the followingcommand to import MongoClient: ```frompymongoimportMongoClient``` Create the command that specifies a client for connecting toyour cluster.In your Python shell, paste your updated connection stringinto the following command: ```client = MongoClient('<connection-string>')``` Update the connection string with your database user password.Verify that you have enclosed the connection string in single quotes.Run the resulting command. It specifies a client that willconnect to your cluster.Connect to your cluster using this client.Now that you've connected to your cluster, proceed toInsert and View Data in Your Cluster.On this page